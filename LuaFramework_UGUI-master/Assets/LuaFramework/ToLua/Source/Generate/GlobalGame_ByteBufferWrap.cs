//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GlobalGame_ByteBufferWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GlobalGame.ByteBuffer), typeof(System.Object));
		L.RegFunction("Allocate", Allocate);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("Write", Write);
		L.RegFunction("WriteShort", WriteShort);
		L.RegFunction("WriteUshort", WriteUshort);
		L.RegFunction("WriteInt", WriteInt);
		L.RegFunction("WriteUint", WriteUint);
		L.RegFunction("WriteLong", WriteLong);
		L.RegFunction("WriteUlong", WriteUlong);
		L.RegFunction("WriteFloat", WriteFloat);
		L.RegFunction("WriteByte", WriteByte);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("ReadUshort", ReadUshort);
		L.RegFunction("ReadShort", ReadShort);
		L.RegFunction("ReadUint", ReadUint);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("ReadUlong", ReadUlong);
		L.RegFunction("ReadLong", ReadLong);
		L.RegFunction("ReadFloat", ReadFloat);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("ReadBytes", ReadBytes);
		L.RegFunction("DiscardReadBytes", DiscardReadBytes);
		L.RegFunction("Clear", Clear);
		L.RegFunction("SetReaderIndex", SetReaderIndex);
		L.RegFunction("MarkReaderIndex", MarkReaderIndex);
		L.RegFunction("MarkWriterIndex", MarkWriterIndex);
		L.RegFunction("ResetReaderIndex", ResetReaderIndex);
		L.RegFunction("ResetWriterIndex", ResetWriterIndex);
		L.RegFunction("ReadableBytes", ReadableBytes);
		L.RegFunction("ToArray", ToArray);
		L.RegFunction("GetCapacity", GetCapacity);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Allocate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				GlobalGame.ByteBuffer o = GlobalGame.ByteBuffer.Allocate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(int)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				GlobalGame.ByteBuffer o = GlobalGame.ByteBuffer.Allocate(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GlobalGame.ByteBuffer.Allocate");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(GlobalGame.ByteBuffer), typeof(byte[])))
			{
				GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.WriteBytes(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(GlobalGame.ByteBuffer), typeof(byte[]), typeof(int)))
			{
				GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.WriteBytes(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(GlobalGame.ByteBuffer), typeof(byte[]), typeof(int), typeof(int)))
			{
				GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.WriteBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GlobalGame.ByteBuffer.WriteBytes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Write(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			GlobalGame.ByteBuffer arg0 = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 2, typeof(GlobalGame.ByteBuffer));
			obj.Write(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteShort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUshort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUshort(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			uint arg0 = (uint)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteUint(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.WriteLong(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteUlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			ulong arg0 = LuaDLL.tolua_checkuint64(L, 2);
			obj.WriteUlong(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteFloat(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteByte(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUshort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			ushort o = obj.ReadUshort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadShort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			short o = obj.ReadShort();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			uint o = obj.ReadUint();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadUlong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			ulong o = obj.ReadUlong();
			LuaDLL.tolua_pushuint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadLong(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			long o = obj.ReadLong();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			float o = obj.ReadFloat();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.ReadBytes(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DiscardReadBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			obj.DiscardReadBytes();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetReaderIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetReaderIndex(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkReaderIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			obj.MarkReaderIndex();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MarkWriterIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			obj.MarkWriterIndex();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetReaderIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			obj.ResetReaderIndex();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetWriterIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			obj.ResetWriterIndex();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadableBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			int o = obj.ReadableBytes();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			byte[] o = obj.ToArray();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCapacity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalGame.ByteBuffer obj = (GlobalGame.ByteBuffer)ToLua.CheckObject(L, 1, typeof(GlobalGame.ByteBuffer));
			int o = obj.GetCapacity();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

